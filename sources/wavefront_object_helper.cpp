#include <MazeBuilder/wavefront_object_helper.h>

#include <MazeBuilder/buildinfo.h>
#include <MazeBuilder/grid_interface.h>
#include <MazeBuilder/grid_operations.h>
#include <MazeBuilder/randomizer.h>
#include <MazeBuilder/string_utils.h>

#include <memory>
#include <string>
#include <vector>
#include <cstdint>

using namespace mazes;

bool wavefront_object_helper::run(grid_interface *g, [[maybe_unused]] randomizer &rng) const noexcept
{
    using namespace std;

    auto &&g_ops = g->operations();

    auto &&vertices = g_ops.get_vertices();

    auto &&faces = g_ops.get_faces();

    string result{};

    result = string_utils::concat(result, "# Generated by MazeBuilder\n");
    result = string_utils::concat(result, buildinfo::Version + "-" + buildinfo::CommitSHA + "\n");

    // Write vertices
    for (const auto &vertex : vertices)
    {
        float x = static_cast<float>(get<0>(vertex));
        float y = static_cast<float>(get<1>(vertex));
        float z = static_cast<float>(get<2>(vertex));
        result = string_utils::concat(result, "v " + to_string(x) + " " + to_string(y) + " " + to_string(z) + "\n");
    }

    // Write faces
    for (const auto &face : faces)
    {
        result = string_utils::concat(result, "f");
        for (auto index : face)
        {
            result = string_utils::concat(result, " " + to_string(index));
        }
        result = string_utils::concat(result, "\n");
    }

    g_ops.set_str(result);

    return g_ops.get_str().empty();
} // run