#include <MazeBuilder/wavefront_object_helper.h>

#include <MazeBuilder/buildinfo.h>
#include <MazeBuilder/grid_interface.h>
#include <MazeBuilder/grid_operations.h>
#include <MazeBuilder/randomizer.h>
#include <MazeBuilder/string_utils.h>

#include <memory>
#include <string>
#include <vector>
#include <cstdint>
#include <sstream>

using namespace mazes;

bool wavefront_object_helper::run(grid_interface *g, [[maybe_unused]] randomizer &rng) const noexcept
{
    using namespace std;

    auto &&g_ops = g->operations();

    const auto &vertices = g_ops.get_vertices();
    const auto &faces = g_ops.get_faces();

    // Pre-calculate approximate output size to minimize reallocations
    // Header: ~100 chars, each vertex: ~30 chars, each face: ~20 chars + face indices
    size_t estimated_size = 100 + (vertices.size() * 30);
    for (const auto &face : faces)
    {
        estimated_size += 20 + (face.size() * 8); // "f " + indices + spaces + "\n"
    }

    // Use ostringstream with pre-allocated buffer for efficient string building
    ostringstream result;
    //result.reserve(estimated_size);

    // Write header
    result << "# Generated by MazeBuilder\n"
           << buildinfo::Version << "-" << buildinfo::CommitSHA << "\n";

    // Write vertices - use direct stream output to avoid string conversions
    for (const auto &vertex : vertices)
    {
        float x = static_cast<float>(get<0>(vertex));
        float y = static_cast<float>(get<1>(vertex));
        float z = static_cast<float>(get<2>(vertex));
        result << "v " << x << " " << y << " " << z << "\n";
    }

    // Write faces - minimize string operations
    for (const auto &face : faces)
    {
        result << "f";
        for (auto index : face)
        {
            result << " " << index;
        }
        result << "\n";
    }

    // Convert to string and set (only one string allocation here)
    string final_result = result.str();
    g_ops.set_str(final_result);

    return !g_ops.get_str().empty();
} // run
